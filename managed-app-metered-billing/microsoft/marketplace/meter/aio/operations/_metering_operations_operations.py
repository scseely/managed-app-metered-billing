# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class MeteringOperationsOperations:
    """MeteringOperationsOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~microsoft.marketplace.meter.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def post_usage_event(
        self,
        body: "models.UsageEvent",
        request_id_parameter: Optional[str] = None,
        correlation_id: Optional[str] = None,
        **kwargs
    ) -> Optional["models.UsageEventOkResponse"]:
        """Posts a single usage event to the marketplace metering service API.

        Posts a single usage event to the marketplace metering service API.

        :param body:
        :type body: ~microsoft.marketplace.meter.models.UsageEvent
        :param request_id_parameter: A unique string value for tracking the request from the client,
         preferably a GUID. If this value isn't provided, one will be generated and provided in the
         response headers.
        :type request_id_parameter: str
        :param correlation_id: A unique string value for operation on the client. This parameter
         correlates all events from client operation with events on the server side. If this value isn't
         provided, one will be generated and provided in the response headers.
        :type correlation_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: UsageEventOkResponse, or the result of cls(response)
        :rtype: ~microsoft.marketplace.meter.models.UsageEventOkResponse or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["models.UsageEventOkResponse"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2018-08-31"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.post_usage_event.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if request_id_parameter is not None:
            header_parameters['x-ms-requestid'] = self._serialize.header("request_id_parameter", request_id_parameter, 'str')
        if correlation_id is not None:
            header_parameters['x-ms-correlationid'] = self._serialize.header("correlation_id", correlation_id, 'str')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'UsageEvent')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 403, 409]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('UsageEventOkResponse', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    post_usage_event.metadata = {'url': '/usageEvent'}  # type: ignore

    async def post_batch_usage_event(
        self,
        body: List["models.UsageEvent"],
        request_id_parameter: Optional[str] = None,
        correlation_id: Optional[str] = None,
        **kwargs
    ) -> Optional[List["models.UsageEventOkResponse"]]:
        """Posts a set of usage events to the marketplace metering service API.

        The batch usage event API allows you to emit usage events for more than one purchased entity at
        once. The batch usage event request references the metering services dimension defined by the
        publisher when publishing the offer.

        :param body:
        :type body: list[~microsoft.marketplace.meter.models.UsageEvent]
        :param request_id_parameter: A unique string value for tracking the request from the client,
         preferably a GUID. If this value isn't provided, one will be generated and provided in the
         response headers.
        :type request_id_parameter: str
        :param correlation_id: A unique string value for operation on the client. This parameter
         correlates all events from client operation with events on the server side. If this value isn't
         provided, one will be generated and provided in the response headers.
        :type correlation_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of UsageEventOkResponse, or the result of cls(response)
        :rtype: list[~microsoft.marketplace.meter.models.UsageEventOkResponse] or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[List["models.UsageEventOkResponse"]]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2018-08-31"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.post_batch_usage_event.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if request_id_parameter is not None:
            header_parameters['x-ms-requestid'] = self._serialize.header("request_id_parameter", request_id_parameter, 'str')
        if correlation_id is not None:
            header_parameters['x-ms-correlationid'] = self._serialize.header("correlation_id", correlation_id, 'str')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, '[UsageEvent]')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 403]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[UsageEventOkResponse]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    post_batch_usage_event.metadata = {'url': '/batchUsageEvent'}  # type: ignore
